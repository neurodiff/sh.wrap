#+CATEGORY: ░ SH.WRAP ░
#+FILETAGS: #project #task #sh_wrap
#+OPTIONS: ^:nil toc:nil num:nil author:nil timestamp:nil
#+COLUMNS: %50ITEM TODO %3PRIORITY %Effort %Effort(Effort Children){:} %10CLOCKSUM
#+OPTIONS: H:1 prop:nil d:nil tags:nil p:t c:nil pri:t

#+HUGO_BASE_DIR: ../site
#+HUGO_SECTION: project
#+HUGO_FRONT_MATTER_FORMAT: yaml
#+HUGO_CUSTOM_FRONT_MATTER:
#+HUGO_DRAFT: false

#+begin_export markdown
---
title: Pool of tasks
date: 2022-05-21T04:04:13+03:00
aliases:
  - /project/todo/todo.md
  - /project/todo/todo.org
url: /project/todo/todo.html
---
#+end_export

* sh.wrap (project tasks)
  :PROPERTIES:
  :CATEGORY: ░ SH.WRAP ░
  :END:

** Code: sh.wrap (project tasks)                                      :@CODE:

*** Code: Documentation generation (project tasks)

**** NEXT Chose documentation generation system               :milestone_001:
     DEADLINE: <2023-01-09 Mon> SCHEDULED: <2023-01-08 Sun>
     :PROPERTIES:
     :Effort:   04:00
     :END:
     <2023-01-03 Tue>

*** Code: core (project tasks)

**** NEXT Write unit tests for core functions          :coding:milestone_001:
     DEADLINE: <2023-01-12 Thu> SCHEDULED: <2023-01-11 Wed>
     :PROPERTIES:
     :Effort:   08:00
     :END:

**** DONE Check and fix unset for globally exported variables inside a module :milestone_001:
     CLOSED: [2023-01-07 Sat 15:52] DEADLINE: <2022-12-31 Sat> SCHEDULED: <2022-12-22 Thu>
     :PROPERTIES:
     :Effort:   03:00
     :END:
     :LOGBOOK:
     - State "DONE"       from "PROGRESS"   [2023-01-07 Sat 15:52]
     - State "PROGRESS"   from "STARTED"    [2023-01-07 Sat 15:52] \\
       fixed but not checked in real use cases
     - State "STARTED"    from "NEXT"       [2023-01-07 Sat 15:52]
     :END:
     <2022-12-20 Tue>

** Docs: sh.wrap (project tasks)                                      :@DOCS:

*** NEXT Pass conversion options and command line arguments to pandoc-convert workflow
    <2022-11-05 Sat>
**** GOAL org-to-md.sh and pandoc-convert workflow [0/5]
     - [ ] extensions sets
       - [ ] clean set (-raw_attribute...)
       - [ ] line break set (+hard_line_breaks...)
     - [ ] command-line arguments
       - [ ] --wrap=auto|none|preserve
       - [ ] --shift-heading-level-by=NUMBER
     - [ ] default sets of options enabled by default
     - [ ] rest command line options (by user request)
     - [ ] rest pandoc extensions (by user request)

*** Docs: Documentation (project tasks)

**** NEXT Add "Getting started" page to documentation :writing:milestone_001:
     DEADLINE: <2023-01-10 Sun> SCHEDULED: <2023-01-10 Sun>
     :PROPERTIES:
     :Effort:   02:00
     :END:
     :LOGBOOK:
     - Rescheduled from "[2022-12-22 Thu]" on [2023-01-08 Sun 13:00] \\
       rescheduled
     :END:
     <2022-12-20 Tue>

**** NEXT Add "Usage" page to documentation           :writing:milestone_001:
     DEADLINE: <2023-01-10 Sun> SCHEDULED: <2023-01-10 Sun>
     :PROPERTIES:
     :Effort:   02:00
     :END:
     :LOGBOOK:
     - Rescheduled from "[2022-12-22 Thu]" on [2023-01-08 Sun 13:00] \\
       rescheduled
     :END:
     <2022-12-20 Tue>

**** NEXT Create user, development and project sections       :milestone_001:
     DEADLINE: <2023-01-10 Tue> SCHEDULED: <2023-01-10 Tue>
     :PROPERTIES:
     :Effort:   01:00
     :END:
     <2022-12-22 Thu>

*** Docs: Documentation system (project tasks)

**** NEXT [#C] Describe documentation system
     :PROPERTIES:
     :Effort:   04:00
     :END:
     <2022-10-31 Mon>

*** DONE Add README
    CLOSED: [2022-12-27 Tue 20:38] DEADLINE: <2022-12-22 Thu> SCHEDULED: <2022-12-22 Thu>
    :PROPERTIES:
    :Effort:   02:00
    :END:
    :LOGBOOK:
    - State "DONE"       from "STARTED"    [2022-12-27 Tue 20:38]
    CLOCK: [2022-12-22 Thu 15:36]--[2022-12-22 Thu 17:15] =>  1:39
    CLOCK: [2022-12-22 Thu 15:06]--[2022-12-22 Thu 15:10] =>  0:04
    - State "STARTED"    from "NEXT"       [2022-12-22 Thu 15:06]
    :END:

**** PASS Minimal README.md contains
     CLOSED: [2022-12-27 Tue 20:38]
     :LOGBOOK:
     - State "PASS"       from "GOAL"       [2022-12-27 Tue 20:38]
     :END:
     - [X] project description
     - [X] installation notes
     - [X] example of usage
     - [X] links to project documentation

** Infra: sh.wrap (project tasks)                                    :@INFRA:

*** NEXT Add repository_dispatch events to trigger documentation rebuild
    <2022-10-30 Sun>

*** Infra: Prebuilt docker images in GH actions (project tasks)
    :PROPERTIES:
    :sort: false
    :END:

**** NEXT [#A] Create GH actions to use docker images from docker hub :coding:milestone_001:
     DEADLINE: <2023-01-08 Sun> SCHEDULED: <2023-01-08 Sun>
     :PROPERTIES:
     :Effort:   04:00
     :END:
     :LOGBOOK:
     - Rescheduled from "[2022-12-22 Thu]" on [2023-01-08 Sun 12:57] \\
       rescheduled
     :END:
     <2022-10-31 Mon>

*** Infra: sh.wrap testing environment (project tasks)

**** NEXT Create docker containers and GH action for test harness :milestone_001:
     DEADLINE: <2023-01-09 Mon> SCHEDULED: <2023-01-09 Mon>
     :PROPERTIES:
     :Effort:   01:00
     :END:
     <2023-01-04 Wed>

** Plan: sh.wrap (project tasks)                                      :@PLAN:

*** Plan: Milestone 0.0.1 (project tasks)                     :milestone_001:

**** TODO Milestone 0.0.1: Update roadmap
     DEADLINE: <2023-01-09 Mon> SCHEDULED: <2023-01-08 Sun>
     :PROPERTIES:
     :Effort:   01:00
     :END:

***** DEPENDENCY [[wrfm001][Write requirements for milestone 0.0.1]]

**** DONE Milestone 0.0.1: Estimate tasks effort
     CLOSED: [2023-01-08 Sun 13:08]
     :PROPERTIES:
     :Effort:   01:00
     :END:
     :LOGBOOK:
     - State "DONE"       from "NEXT"       [2023-01-08 Sun 13:08]
     :END:

**** DONE Milestone 0.0.1: Schedule tasks
     CLOSED: [2023-01-08 Sun 13:50] DEADLINE: <2023-01-08 Sun> SCHEDULED: <2023-01-08 Sun>
     :PROPERTIES:
     :Effort:   01:00
     :END:
     :LOGBOOK:
     - State "DONE"       from "STARTED"    [2023-01-08 Sun 13:50]
     CLOCK: [2023-01-08 Sun 13:43]--[2023-01-08 Sun 13:50] =>  0:07
     CLOCK: [2023-01-08 Sun 13:08]--[2023-01-08 Sun 13:30] =>  0:22
     - State "STARTED"    from "NEXT"       [2023-01-08 Sun 13:08]
     :END:

**** DONE Milestone 0.0.1: Select tasks from current active/backlog/stuck task pools
     CLOSED: [2023-01-07 Sat 15:54]
     :LOGBOOK:
     - State "DONE"       from "NEXT"       [2023-01-07 Sat 15:54]
     :END:


*** Plan: Milestone 0.1.0 (project tasks)                     :milestone_010:

**** NEXT Milestone 0.1.0: Estimate efforts
     SCHEDULED: <2023-01-13 Fri>
     :PROPERTIES:
     :Effort:   01:00
     :END:

**** NEXT Milestone 0.1.0: Schedule tasks
     SCHEDULED: <2023-01-13 Fri>
     :PROPERTIES:
     :Effort:   01:00
     :END:

**** NEXT Milestone 0.1.0: Select tasks
     SCHEDULED: <2023-01-13 Fri>
     :PROPERTIES:
     :Effort:   02:00
     :END:

**** NEXT Milestone 0.1.0: Update roadmap
     SCHEDULED: <2023-01-13 Fri>
     :PROPERTIES:
     :Effort:   01:00
     :END:

*** Plan: Roadmap (project tasks)

**** NEXT Describe sh.wrap purpose and vision                       :writing:
     :PROPERTIES:
     :Effort:   02:00
     :END:

**** STARTED Create roadmap diagram for milestone :planning:milestone_001:ACTIVE:
     DEADLINE: <2023-01-09 Mon> SCHEDULED: <2023-01-08 Sun>
     :PROPERTIES:
     :Effort:   02:00
     :END:
     :LOGBOOK:
     CLOCK: [2023-01-08 Sun 13:56]
     - State "STARTED"    from "NEXT"       [2023-01-08 Sun 13:56]
     :END:

**** DONE Write requirements for milestone 0.0.1     :milestone_001:planning:
     CLOSED: [2023-01-08 Sun 13:53] DEADLINE: <2023-01-08 Sun> SCHEDULED: <2023-01-08 Sun>
     :PROPERTIES:
     :Effort:   02:00
     :END:
     :LOGBOOK:
     - State "DONE"       from "PROGRESS"   [2023-01-08 Sun 13:53]
     - State "PROGRESS"   from "STARTED"    [2023-01-08 Sun 13:52] \\
       GH issues created.
       Milestone 0.0.1 page created.
     CLOCK: [2023-01-08 Sun 13:51]--[2023-01-08 Sun 13:53] =>  0:02
     - Rescheduled from "[2022-12-22 Thu]" on [2023-01-08 Sun 12:56] \\
       reschedule
     - State "STARTED"    from "NEXT"       [2023-01-08 Sun 06:25]
     :END:
     <<wrfm001>>

** QA: sh.wrap (project tasks)                                          :@QA:

*** STARTED Write functional tests for core modules :milestone_001:coding:ACTIVE:
    DEADLINE: <2023-01-12 Thu> SCHEDULED: <2023-01-11 Wed>
    :PROPERTIES:
    :Effort:   8:00
    :END:
    :LOGBOOK:
    - State "STARTED"    from "NEXT"       [2023-01-03 Tue 14:57]
    :END:

*** PROGRESS [#B] Add issue/pr templates                             :ACTIVE:
    :PROPERTIES:
    :Effort:   02:00
    :END:
    :LOGBOOK:
    - State "PROGRESS"   from "STARTED"    [2023-01-08 Sun 06:26] \\
      added bug and feature issue templates
    - State "STARTED"    from "NEXT"       [2023-01-04 Wed 07:36]
    :END:

*** QA: sh.wrap test reports (project tasks)

**** NEXT Automate test reports publishing
     DEADLINE: <2023-01-12 Thu> SCHEDULED: <2023-01-12 Thu>
     :PROPERTIES:
     :Effort:   01:00
     :END:

*** QA: sh.wrap testing environment (project tasks)

**** NEXT Create test matrix
     <2022-12-22 Thu>
***** DEPENDENCY [[cdcagafwwbvp][Create docker containers and GH action for workflow with bash versions passed]]

**** NEXT Create test runner                           :coding:milestone_001:
     DEADLINE: <2023-01-10 Tue> SCHEDULED: <2023-01-09 Mon>
     :PROPERTIES:
     :Effort:   02:00
     :END:
     <2023-01-08 Sun>

* sh.wrap (project backlog)                                        :#backlog:
  :PROPERTIES:
  :CATEGORY: ▪ SH.WRAP ▪
  :END:

** Code: sh.wrap (project backlog)                                    :@CODE:

*** TODO Implement ccache module

*** TODO Implement cert module

*** TODO Implement config module

*** TODO Implement git module

*** TODO Implement path module

*** TODO Implement repo module

**** TODO Implement github module

**** TODO Implement gitlab module

*** TODO Implement scheduler module

*** TODO Implement test module

**** TODO Implement profile module

*** Code: Documentation generation (project backlog)

*** Code: core (project backlog)

**** NEXT Add function with argument passing to import
     <2022-12-22 Thu>
**** COMPLETE Add function to scope
     CLOSED: [2022-12-22 Thu 13:45]
     :LOGBOOK:
     - State "COMPLETE"   from "PROGRESS"   [2022-12-22 Thu 13:45]
     - State "PROGRESS"   from "NEXT"       [2022-12-22 Thu 13:44] \\
       function per modules are implemented in prototype
     :END:

**** COMPLETE Add script for bashrc
     CLOSED: [2022-12-22 Thu 13:45]
     :LOGBOOK:
     - State "COMPLETE"   from "PROGRESS"   [2022-12-22 Thu 13:45]
     - State "PROGRESS"   from "NEXT"       [2022-12-22 Thu 13:45] \\
       init.sh added
     :END:

** Docs: sh.wrap (project backlog)                                    :@DOCS:

*** NEXT Add license

*** NEXT Create project logo
    <2022-12-20 Tue>
*** NEXT Fix code blocks not colored properly with hugo renderer
   <2022-10-31 Mon>
*** NEXT Rework gh-publish workflow
    <2022-11-05 Sat>
**** GOAL Add features to gh-publish script [0/3]
     - [ ] pass commit message as argument
     - [ ] add option to keep commits history
     - [ ] add tag to commit

*** TODO Add option to exclude path patterns from conversion in pandoc-convert workflow
    <2022-11-05 Sat>
*** TODO Fix hugo bug with flickering project/docs tag
    <2022-11-05 Sat>
*** WRITE Describe knowledge system for the project                 :writing:

*** WRITE Describe useful workflows on the project                  :writing:

*** Docs: Documentation system (project backlog)

**** NEXT Describe documentation generation                         :writing:
     <2022-10-31 Mon>

*** Docs: sh.wrap: Development documentation (project backlog)        :@DOCS:

**** NEXT Write style guide for the project                         :writing:

** Infra: sh.wrap (project backlog)                                  :@INFRA:

*** NEXT Add repository_dispatch action to generate documentation on the fly
    <2022-11-05 Sat>

*** TODO Add nodejs workflow
    <<anw>>
    <2022-11-05 Sat>
*** TODO Add spell checker action for project documentation
    <2022-05-22 Sun>

*** TODO Cache node_modules in docsy site generation
    <2022-11-05 Sat>
**** DEPENDENCY [[anw][Add nodejs workflow]]

*** TODO Make universal docker workflow and action
    <2022-11-05 Sat>
**** GOAL Docker workflows and actions [0/2]
     - [ ] one universal workflow and action to all tasks
     - [ ] workflow/action parameters
       - [ ] all parameters are serialized in one file (like workflow tests do)
       - [ ] no workaround when rest arguments are passed as string to parse

*** TODO Write script to sync working repositories with upstream

*** Infra: sh.wrap testing environment (project backlog)

**** NEXT Create docker containers and GH action for workflow with bash versions passed
     <<cdcagafwwbvp>>
     <2022-12-22 Thu>
*** Use ready docker images in GH actions (project backlog)
    :PROPERTIES:
    :sort: false
    :END:

**** NEXT Create GH actions to generate and push docker images
     <2022-10-31 Mon>

** Plan: sh.wrap (project backlog)                                    :@PLAN:

*** TODO Write project review/report templates

*** Plan: Milestone 0.0.1 (project backlog):
    :PROPERTIES:
    :sort:     false
    :END:

*** Plan: Milestone 0.1.0 (project tasks)                     :milestone_010:
    :PROPERTIES:
    :sort:     false
    :END:

*** Plan: Roadmap (project backlog)

** QA: sh.wrap (project backlog)                                        :@QA:

*** TODO Describe GH issue/pr workflows (life-cycle)                :writing:
    <2022-05-21 Sat>

*** TODO Describe issue/test/release verification processes         :writing:
    <2022-05-21 Sat>

*** TODO [#C] Exploratory testing of site generation action
    <2022-05-21 Sat>

*** QA: sh.wrap test reports (project backlog)

**** NEXT Add ability to compare test reports

*** QA: sh.wrap testing environment (project backlog)
:PROPERTIES:
:sort: false
:END:

* sh.wrap (project stuck)                                            :#stuck:
  :PROPERTIES:
  :CATEGORY: □ SH.WRAP □
  :END:

** Code: sh.wrap (project stuck)                                      :@CODE:

** Docs: sh.wrap (project stuck)                                      :@DOCS:

** Infra: sh.wrap (project stuck)                                    :@INFRA:

** Plan: sh.wrap (project stuck)                                      :@PLAN:

** QA: sh.wrap (project stuck)                                          :@QA:

* sh.wrap (habits)                                          :noexport:#habit:
  :PROPERTIES:
  :CATEGORY: ■ SH.WRAP ■
  :END:

** Plan: sh.wrap (habits)                                             :@PLAN:
   :PROPERTIES:
   :sort:     false
   :END:

*** DAILY Task sorting
<%%(identity date)>

*** DAILY Task planning
<%%(identity date)>

*** DAILY Task review
<%%(identity date)>

*** DAILY Task report
<%%(identity date)>

* sh.wrap (project goals)                                      :ACTIVE:#list:
  :PROPERTIES:
  :CATEGORY: ▇ SH.WRAP ▇
  :END:

** Code: sh.wrap (project goals)                                      :@CODE:

*** GOAL Collection of useful shell scripts [0/2]

    - [ ] gpg functions
    - [ ] git functions

*** GOAL Maintainable shell scripts repository [0/3]

    - [ ] Shell scripts are at known locations
    - [ ] Shell scripts are reusable
    - [ ] Shell scripts have versions

* sh.wrap (project archive)                                           :#list:
  :PROPERTIES:
  :CATEGORY: ╳ SH.WRAP ╳
  :END:

** Code: sh.wrap (project archive)                                    :@CODE:

** Docs: sh.wrap (project archive)                                    :@DOCS:

** Infra: sh.wrap (project archive)                                  :@INFRA:

** Plan: sh.wrap (project archive)                                    :@PLAN:

** QA: sh.wrap (project archive)                                        :@QA:
